---

- name: dotfiles | gets the fish path
  ansible.builtin.shell: which fish
  register: bin_fish

- name: dotfiles | gets the path to homebrew binaries
  ansible.builtin.shell: brew config | grep HOMEBREW_PREFIX
  register: homebrew_config

- name: dotfiles | set homebrew_bin_path variable
  set_fact:
    homebrew_prefix: "{{ (homebrew_config.stdout | split(' '))[1] }}"

- name: dotfiles | set binary path variables
  set_fact:
    paths:
      fish: "{{ bin_fish.stdout }}"
  when: paths is undefined

- name: dotfiles | create config dotfiles directory
  file: path={{ directories.dotconfig }} state=directory

###############################################################################
# Find dotfiles to be symlinked and generated using templates
###############################################################################

- name: dotfiles | find files and directories ending with the .symlink extension
  find:
    file_type: any
    paths: '{{ playbook_dir }}/roles/dotfiles/files'
    patterns: '*.symlink'
    recurse: yes
  register: find_file_symlinks

- name: dotfiles | find templates ending with the .symlink extension
  find:
    paths: '{{ playbook_dir }}/roles/dotfiles/templates'
    patterns: '*.symlink'
    recurse: yes
  register: find_dotfile_templates

- name: dotfiles | create backup directory for non-Automaton originals
  file: path=~/.backups state=directory

###############################################################################
# Backup existing dotfiles in home directory before replacing with symlinks
###############################################################################

- name: dotfiles | gather stats on existing ~/.dotfile duplicates of symlinks
  stat:
    path: ~/.{{ (item.path | basename | splitext)[0] }}
  register: existing_symlink_dotfiles
  with_items: '{{find_file_symlinks.files}}'

- name: dotfiles | gather stats on any existing ~/.backups/.dotfile of symlinks
  stat:
    path: ~/.backups/.{{ (item.path | basename | splitext)[0] }}
  register: existing_symlink_backups
  with_items: '{{find_file_symlinks.files}}'

- name: dotfiles | halt if ~/.dotfile and backup ~/.backups/.dotfile both exist and ~/.dotfile isn't a symlink
  fail: msg="Cannot create backup!  ~/.backups/{{ (item.0.stat.path | basename | splitext)[0] }} already exists!"
  with_together:
    - '{{existing_symlink_dotfiles.results}}'
    - '{{existing_symlink_backups.results}}'
  when: item.0.stat.exists and item.1.stat.exists and item.0.stat.islnk == False

- name: dotfiles | backup originals before creating symlinks
  command:
    mv ~/.{{ (item.0.path | basename | splitext)[0] }} ~/.backups/
    creates=~/.backups/.{{ (item.0.path | basename | splitext)[0] }}
    removes=~/.{{ (item.0.path | basename | splitext)[0] }}
  with_together:
    - '{{find_file_symlinks.files}}'
    - '{{existing_symlink_dotfiles.results}}'
  when: item.1.stat.islnk is defined and item.1.stat.islnk == False  # item exists and is not a symlink
  loop_control:
    label: '.{{ (item.0.path | basename | splitext)[0] }}'

###############################################################################
# Create symlinks to dotfiles
###############################################################################

- name: dotfiles | create symlinks for files
  file: src={{ item.path }}
        path=~/.{{ (item.path | basename | splitext)[0] }}
        state=link
        force=yes
  with_items: '{{find_file_symlinks.files}}'

###############################################################################
# Backup existing dotfiles in home directory before replacing with templates
###############################################################################

- name: dotfiles | gather stats on existing ~/.dotfile duplicates of templates
  stat:
    path: ~/.{{ (item.path | basename | splitext)[0] }}
  register: existing_template_dotfiles
  with_items: '{{find_dotfile_templates.files}}'

- name: dotfiles | gather stats on any existing ~/.backups/.dotfile of templates
  stat:
    path: ~/.backups/.{{ (item.path | basename | splitext)[0] }}
  register: existing_symlink_backups
  with_items: '{{find_dotfile_templates.files}}'

- name: dotfiles | backup originals before generating templates
  command:
    mv ~/.{{ (item.0.path | basename | splitext)[0] }} ~/.backups/
    creates=~/.backups/.{{ (item.0.path | basename | splitext)[0] }}
    removes=~/.{{ (item.0.path | basename | splitext)[0] }}
  with_together:
    - '{{find_dotfile_templates.files}}'
    - '{{existing_template_dotfiles.results}}'
  when: item.1.stat.exists  # item exists
  loop_control:
    label: '.{{ (item.0.path | basename | splitext)[0] }}'

###############################################################################
# Generate and write template-based dotfiles
###############################################################################

# Note some nasty dependencies here between creating the symlinks (eg.
# effectively creating ~/mutt/config/) and then templating into it (eg.
# ~/.mutt/config/settings.mutt).
- name: dotfiles | generate and write template-based dotfiles
  template: src={{ item.path }}
            dest=~/.{{ (item.path | basename | splitext)[0] }}
  with_items: '{{find_dotfile_templates.files}}'

###############################################################################
# Run other tasks that are part of the role
###############################################################################

- include_tasks: fish.yml
- include_tasks: kitty.yml
- include_tasks: fonts.yml
# - include_tasks: antibody.yml
# - include_tasks: automounter.yml
# - include_tasks: gpg.yml
# - include_tasks: git.yml
# - include_tasks: iterm.yml
# - include_tasks: vscode.yml
# - include_tasks: zsh.yml
